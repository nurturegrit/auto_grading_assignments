{
    "2": "Question: `Write a Python class for LRU Cache.`\r\n\r\n--Test Cases Start--\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Basic functionality\r\n    lru_cache = solution(2)  # Capacity of 2\r\n    lru_cache.put(1, 1)\r\n    lru_cache.put(2, 2)\r\n    if lru_cache.get(1) == 1:\r\n        passed.append(\"Solution has passed test case with parameters (2) and expected result 1\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (2) result 1\")\r\n\r\n    # Test case 2: Eviction policy\r\n    lru_cache.put(3, 3)  # Evicts key 2\r\n    if lru_cache.get(2) == -1:\r\n        passed.append(\"Solution has passed test case with parameters (3) and expected result -1\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (3) result -1\")\r\n\r\n    # Test case 3: Update existing key\r\n    lru_cache.put(1, 10)  # Update key 1\r\n    if lru_cache.get(1) == 10:\r\n        passed.append(\"Solution has passed test case with parameters (1, 10) and expected result 10\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (1, 10) result 10\")\r\n\r\n    # Test case 4: Capacity limit\r\n    lru_cache.put(4, 4)  # Evicts key 3\r\n    if lru_cache.get(3) == -1:\r\n        passed.append(\"Solution has passed test case with parameters (4) and expected result -1\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (4) result -1\")\r\n\r\n    # Test case 5: Check order of eviction\r\n    lru_cache.put(5, 5)  # Evicts key 1\r\n    if lru_cache.get(1) == -1:\r\n        passed.append(\"Solution has passed test case with parameters (5) and expected result -1\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (5) result -1\")\r\n\r\n    return passed, not_passed\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'capacity' as input.\r\n- The Function should output in such a way that it allows the use of 'put' and 'get' methods for the LRU Cache.\r\n--Constrains End--",
    "1": "Question: `Write a Python Function to reverse a Linked List.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Reverse a linked list with multiple elements\r\n    linked_list_1 = [1, 2, 3, 4, 5]\r\n    expected_result_1 = [5, 4, 3, 2, 1]\r\n    if solution(linked_list_1) == expected_result_1:\r\n        passed.append(\"Solution has passed test case with input [1, 2, 3, 4, 5] and expected result [5, 4, 3, 2, 1]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with input [1, 2, 3, 4, 5] result [5, 4, 3, 2, 1]\")\r\n\r\n    # Test case 2: Reverse a linked list with a single element\r\n    linked_list_2 = [1]\r\n    expected_result_2 = [1]\r\n    if solution(linked_list_2) == expected_result_2:\r\n        passed.append(\"Solution has passed test case with input [1] and expected result [1]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with input [1] result [1]\")\r\n\r\n    # Test case 3: Reverse an empty linked list\r\n    linked_list_3 = []\r\n    expected_result_3 = []\r\n    if solution(linked_list_3) == expected_result_3:\r\n        passed.append(\"Solution has passed test case with input [] and expected result []\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with input [] result []\")\r\n\r\n    # Test case 4: Reverse a linked list with duplicate elements\r\n    linked_list_4 = [1, 2, 2, 3, 3]\r\n    expected_result_4 = [3, 3, 2, 2, 1]\r\n    if solution(linked_list_4) == expected_result_4:\r\n        passed.append(\"Solution has passed test case with input [1, 2, 2, 3, 3] and expected result [3, 3, 2, 2, 1]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with input [1, 2, 2, 3, 3] result [3, 3, 2, 2, 1]\")\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'\r\n- The Function should take a list of integers as input representing the linked list.\r\n- The Function should output a list of integers representing the reversed linked list.\r\n--Constrains End--"
}