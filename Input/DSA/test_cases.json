{
    "1": "Question: `Write a python function to reverse a Linked List`\n\n--Test Cases Start--\n```python\ndef test_solution(solution):\n    class ListNode:\n        def __init__(self, value=0, next=None):\n            self.value = value\n            self.next = next\n\n    def linked_list_to_list(head):\n        result = []\n        current = head\n        while current:\n            result.append(current.value)\n            current = current.next\n        return result\n\n    def list_to_linked_list(lst):\n        if not lst:\n            return None\n        head = ListNode(lst[0])\n        current = head\n        for value in lst[1:]:\n            current.next = ListNode(value)\n            current = current.next\n        return head\n\n    # Test case 1: Normal case with multiple elements\n    input_list = [1, 2, 3, 4, 5]\n    expected_output = [5, 4, 3, 2, 1]\n    head = list_to_linked_list(input_list)\n    reversed_head = solution(head)\n    assert linked_list_to_list(reversed_head) == expected_output, f\"Failed on test case 1\"\n\n    # Test case 2: Single element\n    input_list = [1]\n    expected_output = [1]\n    head = list_to_linked_list(input_list)\n    reversed_head = solution(head)\n    assert linked_list_to_list(reversed_head) == expected_output, f\"Failed on test case 2\"\n\n    # Test case 3: Empty list\n    input_list = []\n    expected_output = []\n    head = list_to_linked_list(input_list)\n    reversed_head = solution(head)\n    assert linked_list_to_list(reversed_head) == expected_output, f\"Failed on test case 3\"\n\n    # Test case 4: Two elements\n    input_list = [1, 2]\n    expected_output = [2, 1]\n    head = list_to_linked_list(input_list)\n    reversed_head = solution(head)\n    assert linked_list_to_list(reversed_head) == expected_output, f\"Failed on test case 4\"\n\n    # Test case 5: List with duplicate elements\n    input_list = [1, 2, 2, 3]\n    expected_output = [3, 2, 2, 1]\n    head = list_to_linked_list(input_list)\n    reversed_head = solution(head)\n    assert linked_list_to_list(reversed_head) == expected_output, f\"Failed on test case 5\"\n\n    print(\"All test cases passed!\")\n\n# Call the test function with the solution function\n# test_solution(solution)\n```\n--Test Cases End--\n\n--Constraints Start--\n- The Function should be named 'solution'.\n- The Function should take a single parameter, which is the head of the linked list (ListNode).\n- The Function should output the head of the reversed linked list (ListNode).\n--Constraints End--"
}