{
    "2": "Question: `Write Best First Search Function. Along with constraints, give me the solution template`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test Case 1\r\n    graph = {\r\n        'A': {'B': 1, 'C': 4},\r\n        'B': {'A': 1, 'D': 2, 'E': 5},\r\n        'C': {'A': 4, 'D': 1},\r\n        'D': {'B': 2, 'C': 1, 'E': 3},\r\n        'E': {'B': 5, 'D': 3}\r\n    }\r\n    start = 'A'\r\n    goal = 'E'\r\n    expected_answer = ['A', 'B', 'D', 'E']\r\n    if solution(graph, start, goal) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters graph, start='A', goal='E' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph, start='A', goal='E' result \" + str(expected_answer))\r\n\r\n    # Test Case 2\r\n    graph = {\r\n        'A': {'B': 2, 'C': 1},\r\n        'B': {'A': 2, 'D': 3},\r\n        'C': {'A': 1, 'D': 4},\r\n        'D': {'B': 3, 'C': 4}\r\n    }\r\n    start = 'A'\r\n    goal = 'D'\r\n    expected_answer = ['A', 'C', 'D']\r\n    if solution(graph, start, goal) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters graph, start='A', goal='D' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph, start='A', goal='D' result \" + str(expected_answer))\r\n\r\n    # Test Case 3\r\n    graph = {\r\n        'A': {'B': 1},\r\n        'B': {'A': 1, 'C': 2},\r\n        'C': {'B': 2}\r\n    }\r\n    start = 'A'\r\n    goal = 'C'\r\n    expected_answer = ['A', 'B', 'C']\r\n    if solution(graph, start, goal) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters graph, start='A', goal='C' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph, start='A', goal='C' result \" + str(expected_answer))\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constraints Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'graph (dict), start (str), goal (str)' as input.\r\n- The Function should output a list of nodes representing the path from start to goal.\r\n--Constraints End--",
    "1": "Question: `Write A* Search Algorithm Function. Along with constraints, give me the solution template`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test Case 1: Simple pathfinding\r\n    start = (0, 0)\r\n    goal = (1, 1)\r\n    grid = [\r\n        [0, 0],\r\n        [0, 0]\r\n    ]\r\n    expected_answer = [(0, 0), (0, 1), (1, 1)]\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (1, 1) and expected result [(0, 0), (0, 1), (1, 1)]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (1, 1) result [(0, 0), (0, 1), (1, 1)]\")\r\n\r\n    # Test Case 2: No path available\r\n    start = (0, 0)\r\n    goal = (1, 1)\r\n    grid = [\r\n        [0, 1],\r\n        [1, 0]\r\n    ]\r\n    expected_answer = []\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (1, 1) and expected result []\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (1, 1) result []\")\r\n\r\n    # Test Case 3: Larger grid with a clear path\r\n    start = (0, 0)\r\n    goal = (2, 2)\r\n    grid = [\r\n        [0, 0, 0],\r\n        [0, 1, 0],\r\n        [0, 0, 0]\r\n    ]\r\n    expected_answer = [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (2, 2) and expected result [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (2, 2) result [(0, 0), (0, 1), (1, 1), (2, 1), (2, 2)]\")\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constraints Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'start', 'goal', and 'grid' as input parameters.\r\n- The Function should output a list of tuples representing the path from start to goal, or an empty list if no path exists.\r\n--Constraints End--"
}