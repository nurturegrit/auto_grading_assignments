{
    "1": "Question: `Write DFS Function`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Simple graph\r\n    graph1 = {\r\n        'A': ['B', 'C'],\r\n        'B': ['A', 'D', 'E'],\r\n        'C': ['A', 'F'],\r\n        'D': ['B'],\r\n        'E': ['B', 'F'],\r\n        'F': ['C', 'E']\r\n    }\r\n    expected1 = ['A', 'B', 'D', 'E', 'F', 'C']  # DFS starting from A\r\n    if solution(graph1, 'A') == expected1:\r\n        passed.append(\"Solution has passed test case with parameters graph1, 'A' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph1, 'A' result \" + str(expected1))\r\n\r\n    # Test case 2: Graph with no edges\r\n    graph2 = {\r\n        'A': [],\r\n        'B': [],\r\n        'C': []\r\n    }\r\n    expected2 = ['A']  # DFS starting from A\r\n    if solution(graph2, 'A') == expected2:\r\n        passed.append(\"Solution has passed test case with parameters graph2, 'A' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph2, 'A' result \" + str(expected2))\r\n\r\n    # Test case 3: Graph with cycles\r\n    graph3 = {\r\n        'A': ['B'],\r\n        'B': ['C', 'A'],\r\n        'C': ['D'],\r\n        'D': ['B']\r\n    }\r\n    expected3 = ['A', 'B', 'C', 'D']  # DFS starting from A\r\n    if solution(graph3, 'A') == expected3:\r\n        passed.append(\"Solution has passed test case with parameters graph3, 'A' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph3, 'A' result \" + str(expected3))\r\n\r\n    # Test case 4: Empty graph\r\n    graph4 = {}\r\n    expected4 = []  # DFS starting from any node in an empty graph\r\n    if solution(graph4, 'A') == expected4:\r\n        passed.append(\"Solution has passed test case with parameters graph4, 'A' and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph4, 'A' result \" + str(expected4))\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'a graph represented as a dictionary and a starting node as input'.\r\n- The Function should output a list of nodes in the order they were visited in a DFS traversal.\r\n--Constrains End--",
    "2": "Hello"
}