{
    "2": "Question: `Write a function to do Best first Search.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n    \r\n    # Test Case 1: Simple graph with direct path\r\n    graph1 = {\r\n        'A': {'B': 1, 'C': 4},\r\n        'B': {'D': 2},\r\n        'C': {},\r\n        'D': {}\r\n    }\r\n    start1 = 'A'\r\n    goal1 = 'D'\r\n    expected1 = ['A', 'B', 'D']\r\n    \r\n    if solution(graph1, start1, goal1) == expected1:\r\n        passed.append(\"Solution has passed test case with parameters graph1, start1, goal1 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph1, start1, goal1 result \" + str(expected1))\r\n    \r\n    # Test Case 2: Graph with no path\r\n    graph2 = {\r\n        'A': {'B': 1},\r\n        'B': {'C': 1},\r\n        'C': {}\r\n    }\r\n    start2 = 'A'\r\n    goal2 = 'D'\r\n    expected2 = None\r\n    \r\n    if solution(graph2, start2, goal2) == expected2:\r\n        passed.append(\"Solution has passed test case with parameters graph2, start2, goal2 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph2, start2, goal2 result \" + str(expected2))\r\n    \r\n    # Test Case 3: Graph with multiple paths\r\n    graph3 = {\r\n        'A': {'B': 1, 'C': 2},\r\n        'B': {'D': 2},\r\n        'C': {'D': 1},\r\n        'D': {}\r\n    }\r\n    start3 = 'A'\r\n    goal3 = 'D'\r\n    expected3 = ['A', 'C', 'D']  # Best path\r\n    \r\n    if solution(graph3, start3, goal3) == expected3:\r\n        passed.append(\"Solution has passed test case with parameters graph3, start3, goal3 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs graph3, start3, goal3 result \" + str(expected3))\r\n    \r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'graph (dict), start (str), goal (str)' as input.\r\n- The Function should output a list of nodes representing the path from start to goal, or None if no path exists.\r\n--Constrains End--",
    "1": "Question: `Write a function to do A* Search.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test Case 1: Simple path\r\n    start = (0, 0)\r\n    goal = (1, 1)\r\n    grid = [[0, 0], [0, 0]]\r\n    expected_answer = [(0, 0), (1, 0), (1, 1)]\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (1, 1) and expected result [(0, 0), (1, 0), (1, 1)]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (1, 1) result [(0, 0), (1, 0), (1, 1)]\")\r\n\r\n    # Test Case 2: Blocked path\r\n    start = (0, 0)\r\n    goal = (2, 2)\r\n    grid = [[0, 1, 0], [0, 1, 0], [0, 0, 0]]\r\n    expected_answer = None\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (2, 2) and expected result None\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (2, 2) result None\")\r\n\r\n    # Test Case 3: Larger grid with multiple paths\r\n    start = (0, 0)\r\n    goal = (3, 3)\r\n    grid = [[0, 0, 0, 0], [0, 1, 1, 0], [0, 0, 0, 0], [0, 1, 0, 0]]\r\n    expected_answer = [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\r\n    if solution(start, goal, grid) == expected_answer:\r\n        passed.append(\"Solution has passed test case with parameters (0, 0), (3, 3) and expected result [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0, 0), (3, 3) result [(0, 0), (1, 0), (2, 0), (2, 1), (2, 2), (3, 2), (3, 3)]\")\r\n\r\n    Hello\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'\r\n- The Function should take 'start, goal, grid' as input.\r\n- The Function should output a list of tuples representing the path from start to goal, or None if no path exists.\r\n--Constrains End--"
}