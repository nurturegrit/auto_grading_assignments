{
    "1": "Question: `Write a function to solve n_queens problems.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Solve for 1 queen\r\n    expected_answer_1 = [[0]]\r\n    if solution(1) == expected_answer_1:\r\n        passed.append(\"Solution has passed test case with parameters (1) and expected result [[0]]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (1) result \" + str(solution(1)) + \" expected \" + str(expected_answer_1))\r\n\r\n    # Test case 2: Solve for 4 queens\r\n    expected_answer_2 = [[1, 3, 0, 2], [2, 0, 3, 1]]  # Two valid solutions for 4 queens\r\n    result_2 = solution(4)\r\n    if sorted(result_2) == sorted(expected_answer_2):\r\n        passed.append(\"Solution has passed test case with parameters (4) and expected result [[1, 3, 0, 2], [2, 0, 3, 1]]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (4) result \" + str(result_2) + \" expected \" + str(expected_answer_2))\r\n\r\n    # Test case 3: Solve for 8 queens\r\n    result_3 = solution(8)\r\n    if len(result_3) > 0:  # Expecting at least one solution\r\n        passed.append(\"Solution has passed test case with parameters (8) and returned a non-empty result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (8) result \" + str(result_3) + \" expected non-empty result\")\r\n\r\n    # Test case 4: Solve for 0 queens\r\n    expected_answer_4 = [[]]  # One way to place 0 queens\r\n    if solution(0) == expected_answer_4:\r\n        passed.append(\"Solution has passed test case with parameters (0) and expected result [[]]\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case with inputs (0) result \" + str(solution(0)) + \" expected \" + str(expected_answer_4))\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'.\r\n- The Function should take an integer `n` as input, representing the number of queens.\r\n- The Function should output a list of lists, where each inner list represents a valid configuration of queens on an `n x n` chessboard. Each element in the inner list represents the column index of the queen in that row.\r\n--Constrains End--",
    "2": "Question: `Write a function to do DFS of graph using stacks.`\r\n\r\n--Test Cases Start--\r\n```python\r\ndef test_solution(solution):\r\n    passed = []\r\n    not_passed = []\r\n\r\n    # Test case 1: Simple graph\r\n    graph1 = {\r\n        0: [1, 2],\r\n        1: [0, 3],\r\n        2: [0],\r\n        3: [1]\r\n    }\r\n    expected_result1 = [0, 1, 3, 2]  # DFS starting from node 0\r\n    if solution(graph1, 0) == expected_result1:\r\n        passed.append(\"Solution has passed test case 1 with parameters graph1, 0 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case 1 with inputs graph1, 0 result \" + str(expected_result1))\r\n\r\n    # Test case 2: Graph with a cycle\r\n    graph2 = {\r\n        0: [1],\r\n        1: [2],\r\n        2: [0, 3],\r\n        3: []\r\n    }\r\n    expected_result2 = [0, 1, 2, 3]  # DFS starting from node 0\r\n    if solution(graph2, 0) == expected_result2:\r\n        passed.append(\"Solution has passed test case 2 with parameters graph2, 0 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case 2 with inputs graph2, 0 result \" + str(expected_result2))\r\n\r\n    # Test case 3: Disconnected graph\r\n    graph3 = {\r\n        0: [1],\r\n        1: [0],\r\n        2: [3],\r\n        3: [2]\r\n    }\r\n    expected_result3 = [0, 1]  # DFS starting from node 0\r\n    if solution(graph3, 0) == expected_result3:\r\n        passed.append(\"Solution has passed test case 3 with parameters graph3, 0 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case 3 with inputs graph3, 0 result \" + str(expected_result3))\r\n\r\n    # Test case 4: Empty graph\r\n    graph4 = {}\r\n    expected_result4 = []  # DFS starting from any node should return empty\r\n    if solution(graph4, 0) == expected_result4:\r\n        passed.append(\"Solution has passed test case 4 with parameters graph4, 0 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case 4 with inputs graph4, 0 result \" + str(expected_result4))\r\n\r\n    # Test case 5: Single node graph\r\n    graph5 = {\r\n        0: []\r\n    }\r\n    expected_result5 = [0]  # DFS starting from node 0\r\n    if solution(graph5, 0) == expected_result5:\r\n        passed.append(\"Solution has passed test case 5 with parameters graph5, 0 and expected result\")\r\n    else:\r\n        not_passed.append(\"Solution has not passed test case 5 with inputs graph5, 0 result \" + str(expected_result5))\r\n\r\n    return passed, not_passed\r\n```\r\n--Test Cases End--\r\n\r\n--Constrains Start--\r\n- The Function should be named 'solution'.\r\n- The Function should take a graph (as a dictionary) and a starting node (as an integer) as input.\r\n- The Function should output a list of nodes in the order they were visited during the DFS traversal.\r\n--Constrains End--"
}